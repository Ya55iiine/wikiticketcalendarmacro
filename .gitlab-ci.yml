workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH    

default:
  image: alpine:latest

stages:   # List of stages for jobs, and their order of execution
  - build
  - deploy

build-job:  # This job runs in the build stage.
  stage : build
  image: centos:7
  
  before_script:  # Setup poetry
    - yum install -y python-ldap
    - yum install -y epel-release
    - yum install -y python-pip
    - pip install --upgrade "pip < 21.0"
    - pip install poetry
    - yum install -y centos-release-scl
    - yum install -y rh-python38
    - cd $PWD/wikiticketcalendarmacro
    - poetry update
    - poetry install
    - source `poetry env info --path`/bin/activate
  
  script:  # Build the package
    - echo "This is the build stage"
    - poetry build
    - echo "Build done ..."
   
  after_script:  # Publish it into the GitLab package registry of the Trac group.
    - source /opt/rh/rh-python38/enable
    - pip install "urllib3 == 1.26.15"
    - pip install "python-gitlab == 3.14.0"
    - package_id=$(gitlab -c $GITLAB_API_CONF project-package list --project-id 481|tr -d ':space:\n'|awk '{print $2}')
    - if [ ! -z "$package_id" ]; then gitlab -c $GITLAB_API_CONF project-package delete --project-id 481 --id $package_id; fi
    - poetry config repositories.gitlab http://gitlab.artus.dom/api/v4/projects/481/packages/pypi
    - poetry config http-basic.gitlab $CI_DEPLOY_USER $CI_DEPLOY_PASSWORD
    - echo "Gitlab repository configured ..."
    - cd $PWD/wikiticketcalendarmacro
    - poetry publish -r gitlab
    - echo "Publishing done!"

#   environment:
#         name: production
#         url: http://10.125.2.8

# deploy-job:   # This job runs in the deploy stage.
#   stage : deploy
  
#   before_script:  # Setup deployment
#     - apk update && apk add --upgrade openssh-client && apk add --upgrade util-linux
#     - mkdir "$(pwd)/.ssh"
#     - chmod 700 "$(pwd)/.ssh"
#     - echo -e "$VM11_KEY" > "$(pwd)/.ssh/id_deployer"
#     - chmod 600 "$(pwd)/.ssh/id_deployer"
#     - eval `ssh-agent`
#     - echo "$VM11_PASSPHRASE"|SSH_ASKPASS=/bin/cat setsid -w ssh-add $(pwd)/.ssh/id_deployer

#   script:  # Install the package on the remote target (user/password in /etc/pip.conf).
#     - ssh -i "$(pwd)/.ssh/id_deployer" -o StrictHostKeyChecking=no "$VM11_USER@$VM11_IP" "bash -s" < $INSTALL_SCRIPT
